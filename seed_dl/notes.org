#+title: Seed DL workflow


* Naming conventions
torrents are distributed based on a ~.torrent~ file, which produces a torrent.
confusingly, the name of a torrent and the name of the ~.torrent~ file are mostly
not the same. ~.torrent~ files use bencode to store the information about the
torrent it creates. to keep that distinction clear, "torrentfile" refers to the
torrent files downloaded as a result of adding a ~.torrent~ file to a torrent client.
* Torrent management
locally, torrents are tracked via the ~torrents.json~ file. This is to create a
source of truth that can be checked against the seedbox. this will update and
change the status of torrents according to:

- has the ~.torrent~ been uploaded to the seedbox?
- has the torrentfile finished downloading on the server?
- has the torrentfile finished downloading locally?
* connecting to the seedbox
at the moment, this is designed for the shared seedboxes at seedbox.io. these
only allow you to connect via FTP, there is no shell access and you cannot use
sftp, or rsync, as these would be much better suited to this type of file
transfer. Alas, we must make use of the antiquated FTP system.

the credentials stored in the config file. obviously keep those secrets safe.
* Future additions
This is WIP, and there are a few functionalities I would like to add:

- torrent type identifier. using things in the name (such as the file
  extensions, naming conventions (e.g. DVDrip, 1080p for movies, FLAC, 320 MP3
  for music, Win x64 for applications)) to classify what a torrent is. this
  could be used to correctly move files to different locations, or to
  selectively pull only a certain type.
- first-time scanner. This would scan the seedbox for all torrents, as well as
  local torrent files to produce a database that includes all torrent files,
  local and remote.

* <2023-01-18 Wed> post on RED
Hello!

I am working on a CLI seedbox torrent management tool. I use a shared seedbox with very restricted possibilities for file syncing. What is sets out to do:

1) detect .torrent files in your download directory
2) move them into the WATCH folder of the seedbox
3) check if the torrent has completed successfully
4) download the torrent file locally

running as a background process, this means as a user, you can just download a .torrent, and a short while later it will appear in your library!

it all works (will release soon!) but I want to implement a tool that can detect the content type of a torrent. (movie, audio, ISO etc). using MIMEtypes (i.e. the file extensions) is one option, but I think you could use the name of the .torrent file itself. take for instance:

John Surman - Invisible Threads - 2018 (WEB - FLAC - Lossless)-1612811.torrent

I am sure a very simple decision tree could detect that this is an audio torrent. however, to train a decision tree I need a large set of torrent names to train the model. Can anyone point me towards a dataset of torrent filenames? bonus points if this has been classified into filetypes beforehand.

alternatively, any good ideas on how I could detect the type of file produced by a .torrent file?
